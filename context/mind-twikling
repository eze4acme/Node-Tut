Here is a 197 character take on why the event loop is hard in Node.js:

The event loop is the secret sauce enabling Node.js to handle high concurrency with a single thread. 
But wrapping your head around its event-driven, 
non-blocking I/O model is challenging coming from a threaded blocking I/O mindset. 
Understanding concepts like the call stack, callback queue, 
and how to avoid issues like long running tasks blocking the event loop takes time. 
Proper use of callbacks, promises, async/await is key. 
The event loop forces you to think differently about code execution order and performance. 
Mastering the event loop and non-blocking I/O is critical to writing optimized, scalable Node.js apps. and Here is a 194 character explanation of the Node.js event loop with a code snippet:

The event loop allows Node.js to perform non-blocking I/O operations despite using a single thread.
 It works like this:

```js
// Blocking operation like reading file
fs.readFile(file, () => {
  // Callback function queued in callback queue  
  console.log("File contents") 
})

// While file reads, event loop proceeds to next queued event
process.nextTick(() => {
  console.log("Next tick") 
})
```

When I/O finishes, its callback is pushed to the callback queue. 
The event loop checks the call stack, executes the callback function if empty,
 and continues processing the event queue. This allows non-blocking execution so Node can handle high throughput.